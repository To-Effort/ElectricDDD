// <auto-generated />
using System;
using Electric.EntityFrameworkCore.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Electric.EntityFrameworkCore.DbMigrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("AuditLogType")
                        .HasColumnType("int");

                    b.Property<string>("BrowserInfo")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ExceptionMessage")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.ToTable("EleAuditLog", (string)null);
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.ElePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Component")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionType")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.ToTable("ElePermission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ee7bc30-d4b6-47e1-b38d-6b7cb63d7b99"),
                            ApiMethod = "GET",
                            Code = "system",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(940),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "el-icon-s-tools",
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "系统管理",
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("95e211a2-c72b-4c02-a383-4eb710e552d2"),
                            ApiMethod = "GET",
                            Code = "system.user",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(1009),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "el-icon-user-solid",
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "用户管理",
                            ParentId = new Guid("2ee7bc30-d4b6-47e1-b38d-6b7cb63d7b99"),
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a84d1073-e869-4a0f-801b-37355d074683"),
                            ApiMethod = "GET",
                            Code = "system.role",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(1014),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "peoples",
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "角色管理",
                            ParentId = new Guid("2ee7bc30-d4b6-47e1-b38d-6b7cb63d7b99"),
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e8b95a50-7078-487f-9d05-19caec620948"),
                            ApiMethod = "GET",
                            Code = "system.permission",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(1018),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "list",
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "菜单管理",
                            ParentId = new Guid("2ee7bc30-d4b6-47e1-b38d-6b7cb63d7b99"),
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3a631953-c258-4280-8df8-515ac86c73a2"),
                            ApiMethod = "GET",
                            Code = "system.rolepermission",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(1022),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "example",
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "角色权限",
                            ParentId = new Guid("2ee7bc30-d4b6-47e1-b38d-6b7cb63d7b99"),
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3985168e-0ff0-40bf-a076-1849c0e04894"),
                            ApiMethod = "GET",
                            Code = "log.auditlog",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(1035),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "bug",
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "日志管理",
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("4cb4bbec-2e60-4b3e-94c8-d409acb9cd41"),
                            ApiMethod = "GET",
                            Code = "system.user.add",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(1041),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "添加",
                            ParentId = new Guid("95e211a2-c72b-4c02-a383-4eb710e552d2"),
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8e6196ba-e4a1-4e33-b1b6-a8131478d27c"),
                            ApiMethod = "GET",
                            Code = "system.user.edit",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(1045),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "编辑",
                            ParentId = new Guid("95e211a2-c72b-4c02-a383-4eb710e552d2"),
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("efb1dedb-d98f-4c0e-aabf-54ba9264538c"),
                            ApiMethod = "GET",
                            Code = "system.user.delete",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(1713),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "删除",
                            ParentId = new Guid("95e211a2-c72b-4c02-a383-4eb710e552d2"),
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("cf114614-e73c-413f-b455-ace9b1230099"),
                            ApiMethod = "GET",
                            Code = "system.role.add",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(2368),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "添加",
                            ParentId = new Guid("a84d1073-e869-4a0f-801b-37355d074683"),
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d4ebab18-76fe-4546-9ab2-109f96f01918"),
                            ApiMethod = "GET",
                            Code = "system.role.edit",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(2386),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "编辑",
                            ParentId = new Guid("a84d1073-e869-4a0f-801b-37355d074683"),
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("48aac212-bb22-49b7-ac70-7830379ec0f8"),
                            ApiMethod = "GET",
                            Code = "system.role.delete",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(2390),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "删除",
                            ParentId = new Guid("a84d1073-e869-4a0f-801b-37355d074683"),
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("970f60c7-ea07-4efb-874d-79204f1d1655"),
                            ApiMethod = "GET",
                            Code = "system.permission.add",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(2396),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "添加",
                            ParentId = new Guid("e8b95a50-7078-487f-9d05-19caec620948"),
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("0e216a44-c4e1-44db-bb02-a6dc36cd77ef"),
                            ApiMethod = "GET",
                            Code = "system.permission.edit",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(2400),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "编辑",
                            ParentId = new Guid("e8b95a50-7078-487f-9d05-19caec620948"),
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e6abe7c7-6f3a-4480-b9d9-80b223ef6a16"),
                            ApiMethod = "GET",
                            Code = "system.permission.delete",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(2405),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "删除",
                            ParentId = new Guid("e8b95a50-7078-487f-9d05-19caec620948"),
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d9cdd628-53af-45cf-95e1-9a1a714adffc"),
                            ApiMethod = "GET",
                            Code = "system.rolepermission.update",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(2409),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "更新",
                            ParentId = new Guid("3a631953-c258-4280-8df8-515ac86c73a2"),
                            PermissionType = 1,
                            Sort = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("NormalizedName");

                    b.ToTable("EleRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            ConcurrencyStamp = "b7b8c8a22f1b46739f363c9ed8eb1651",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 467, DateTimeKind.Local).AddTicks(3927),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "管理员",
                            NormalizedName = "管理员",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleRoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("EleRoleClaim", (string)null);
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleRolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId");

                    b.ToTable("EleRolePermission", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("2ee7bc30-d4b6-47e1-b38d-6b7cb63d7b99"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3094),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("95e211a2-c72b-4c02-a383-4eb710e552d2"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3119),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("a84d1073-e869-4a0f-801b-37355d074683"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3121),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("e8b95a50-7078-487f-9d05-19caec620948"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3123),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("3a631953-c258-4280-8df8-515ac86c73a2"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3124),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("3985168e-0ff0-40bf-a076-1849c0e04894"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3127),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("4cb4bbec-2e60-4b3e-94c8-d409acb9cd41"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3128),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("8e6196ba-e4a1-4e33-b1b6-a8131478d27c"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3130),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("efb1dedb-d98f-4c0e-aabf-54ba9264538c"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3131),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("cf114614-e73c-413f-b455-ace9b1230099"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3134),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("d4ebab18-76fe-4546-9ab2-109f96f01918"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3136),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("48aac212-bb22-49b7-ac70-7830379ec0f8"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3137),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("970f60c7-ea07-4efb-874d-79204f1d1655"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3156),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("0e216a44-c4e1-44db-bb02-a6dc36cd77ef"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3170),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("e6abe7c7-6f3a-4480-b9d9-80b223ef6a16"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3172),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            PermissionId = new Guid("d9cdd628-53af-45cf-95e1-9a1a714adffc"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(3174),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SecurityStamp");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail");

                    b.HasIndex("NormalizedUserName");

                    b.HasIndex("UserName");

                    b.ToTable("EleUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fd517ac-ac8b-4a38-aefb-487c50bb2aca"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25bfc1b7132d478fa191bb0ba9247d6f",
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 467, DateTimeKind.Local).AddTicks(4528),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Email = "admin@eletric.com",
                            EmailConfirmed = true,
                            FullName = "管理员",
                            LastModifierId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ELETRIC.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEI0+KF1TsaGvc2wIEFeTbgnMFnQItHN4v6Z31SJP5VHz5F1tEozu0sv7s8eNKOlPRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b350f12c-eb84-443d-9cfa-d1f04a95438b",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EleUserClaim", (string)null);
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleUserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId", "LoginProvider");

                    b.HasIndex("LoginProvider", "ProviderKey");

                    b.ToTable("EleUserLogin", (string)null);
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId", "UserId");

                    b.ToTable("EleUserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6fd517ac-ac8b-4a38-aefb-487c50bb2aca"),
                            RoleId = new Guid("388bc057-97f4-4868-b864-d104541b52fa"),
                            CreationTime = new DateTime(2023, 12, 26, 13, 9, 51, 635, DateTimeKind.Local).AddTicks(807),
                            CreatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("EleUserToken", (string)null);
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleRoleClaim", b =>
                {
                    b.HasOne("Electric.Domain.Entitys.Identity.EleRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleRolePermission", b =>
                {
                    b.HasOne("Electric.Domain.Entitys.Identity.ElePermission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Electric.Domain.Entitys.Identity.EleRole", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleUserClaim", b =>
                {
                    b.HasOne("Electric.Domain.Entitys.Identity.EleUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleUserLogin", b =>
                {
                    b.HasOne("Electric.Domain.Entitys.Identity.EleUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleUserRole", b =>
                {
                    b.HasOne("Electric.Domain.Entitys.Identity.EleRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Electric.Domain.Entitys.Identity.EleUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleUserToken", b =>
                {
                    b.HasOne("Electric.Domain.Entitys.Identity.EleUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleRole", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Electric.Domain.Entitys.Identity.EleUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Roles");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
